@model SistemaChequesNuevo.Models.Proveedor

@{
    ViewData["Title"] = "Create";
}

<div class="edit-add active">

    <div class="edit-form">

        <h2>Crear proveedor</h2>

        <form asp-action="Create" id="miFormulario">

            <div asp-validation-summary="ModelOnly"> </div>

            <!-- Nombre -->
            <div class="form-input">
                <span asp-validation-for="Nombre" class="icon"></span>
                <input asp-for="Nombre" class="" />
                <label asp-for="Nombre" class="form-label">Nombre</label>
            </div>

            <!-- Tipo de persona -->
            <div class="form-input">
                <!-- <label asp-for="TipoPersona" class="control-la@*bel"></label>
                <input asp-for="TipoPersona" class="form-control" />
                <span asp-validation-for="TipoPersona" class*@="text-danger"></span> -->

                <select asp-for="TipoPersona" class="form-select" asp-items="ViewBag.TipoPersona"></select>
                <span asp-validation-for="TipoPersona" class=""></span>
                <label asp-for="TipoPersona" class="form-label">Tipo de persona</label>

            </div>

            <!-- Cedula -->
            <div class="form-input">
                <span asp-validation-for="DocumentoIdentificador" class=""></span>
                <input asp-for="DocumentoIdentificador" class="" id="Cedula" maxlength="11" />
                <label asp-for="DocumentoIdentificador" class="form-label">Cedula</label>


                @if (@ViewBag.isInvalidCedula != null && @ViewBag.isInvalidCedula)
                {
                    <span class="text-danger">La cedula es invalida</span>
                }
            </div>

            <!-- Balance -->
            <div class="form-input">
                <span asp-validation-for="Balance" class=""></span>
                <input asp-for="Balance" class="" id="Balance" maxlength="10" />
                <label asp-for="Balance" class="form-label">Balance</label>
            </div>

            <!-- Cuenta Contable -->
            <div class="form-input">
                <span asp-validation-for="CuentaContable" class=""></span>
                <input asp-for="CuentaContable" class="" type="text" class="" id="CuentaContable" maxlength="10" />
                <label asp-for="CuentaContable" class="form-label">Cuenta Contable</label>
            </div>

            <div class="form-input">
                <span asp-validation-for="Estado" class=""></span>
                <select asp-for="Estado" class="form-select">
                    <option selected disabled>  Seleccione el estado </option>
                    <option value="Pendiente">Pendiente</option>
                    <option value="Aprobado">Aprobado</option>
                    <option value="En Proceso">En Proceso</option>
                    <option value="Pagado">Pagado</option>
                    <option value="Rechazado">Rechazado</option>
                    <option value="Aprobado">Aprobado</option>
                </select>
                <label asp-for="Estado" class="form-label">Estado</label>
            </div>

            <input type="submit" value="Create" class="btn" />

            <div class="login-register">
                <a asp-action="Index" class="go-back">Back to List</a>
            </div>

        </form>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        document.getElementById("miFormulario").addEventListener("submit", function (event) {
            event.preventDefault(); // Evita que el formulario se envíe de forma predeterminada

            // Muestra la alerta de SweetAlert
            Swal.fire({
                position: "top-end",
                icon: "success",
                title: "Your work has been saved successfully",
                showConfirmButton: false,
                timer: 1500
            }).then((result) => {
                // Cuando se cierre la alerta, envía el formulario
                if (result.dismiss === Swal.DismissReason.timer) {
                    document.getElementById("miFormulario").submit();
                }
            });
        });

    </script>
 
    <script>
        console.log('Hola');
        document.addEventListener("DOMContentLoaded", function () {
            const inputCedula = document.getElementById("Cedula");

            inputCedula.addEventListener('input', function (event) {
                const inputValue = event.target.value;
                return onlyNumbers(inputValue);
            });

            const inputBalance = document.getElementById("Balance");

            inputBalance.addEventListener('input', function (event) {
                const inputValue = event.target.value;
                return onlyNumbers(inputValue);
            });

            const inputCuentaContable = document.getElementById("CuentaContable");

            inputCuentaContable.addEventListener('input', function (event) {
                const inputValue = event.target.value;
                return onlyNumbers(inputValue);
            });

            function onlyNumbers(inputValue) {
                const lastChar = inputValue[inputValue.length - 1];

                // Permitir números y el signo "+"
                if (!isNaN(lastChar) || lastChar === "+") {
                    // Permitir la entrada
                } else {
                    // Bloquear la entrada eliminando el último carácter
                    event.target.value = inputValue.substring(0, inputValue.length - 1);
                }
            }
        });

    </script>

  }